### adding new field to log record

<record>
    hostname "#{Socket.gethostname}"
    tag ${tag}
</record>



### available variables specially in record_transformer

${record['key']}
${hostname} ${host}
${tag}
${tag_parts[1]}
${time}



### using ruby functions

#{Socket.gethostname}
#{worker_id}



### editing fields of a log record

<filter>
    @type record_transformer
    enable_ruby
    <record>
        message ${record["message"][0..2]} ${time} ${record["data"][3, record["data"].length]}
    </record>
</filter>

<filter part.ai>
    @type record_transformer
    enable_ruby true
    <record>
        timestamp "${timestamp.to_datetime.iso8601(6)}"
    </record>
</filter>



### working with tags - example tag
test.syslog.logger.local0.info
### working with tags - usage 1
${tag_parts.last(4)}, ${tag_parts[1..4]}
### working with tags - result 1
["syslog", "logger", "local0", "info"]

### working with tags - usage 2
01.${tag_parts.last[1..4]}
### working with tags - result 2
01.nfo

### working with tags - usage 3
02.${tag_parts[1..tag_parts.length].join(".")}
### working with tags - result 3
02.syslog.logger.local0.info



### using conditions(complex_logic) with record_modifier...see also routing
### temporal key trick like
<filter develop.json.**>
  @type record_modifier
  @id record-modifier-first-json
  remove_keys _dummy_
  enable_ruby
  <record>
    ### complex_logic, adding a key-value based on value of a field
    ### check ; ###
    # _dummy_ ${if (record['service'] == 'speech' or  record['service'] == 'nlp') then record['test'] = 'good.test.ai' else record['test'] = 'bad.test.ai'; end;}
    _dummy_ ${if (record['service'] == 'speech' or  record['service'] == 'nlp') then record['test'] = 'good.test.ai'; else record['test'] = 'bad.test.ai'; end;}
  </record>
</filter>

### complex_logic, adding a key-value based on existence of a key
${if record.has_key?('foo'); record['bar'] = 'Hi!'; end; nil}